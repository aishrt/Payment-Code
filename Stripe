Stripe


------------ Make paymentIntents api in Node Js-----------------------

const stripe = require("./model");

const paymentIntent = async (req, res) => {
  try {
    // const secretKeyVal = "sk_test_ui9wRiY8QFwIw8q5M5xhubGP";
    const secretKeyVal = process.env.STRIPE_API_KEY_BACKEND;
    const payableAmount = req.params.amount;

    const userStripe = require("stripe")(secretKeyVal); // Initializing Stripe with Secret Key:

    const paymentResponse = await userStripe.paymentIntents.create({
      amount: payableAmount,
      currency: "eur",
      payment_method_types: ["card"],
      statement_descriptor: "Custom descriptor", // It appears on the customer's credit card statement.
    });

    return res.status(200).json({
      status: 200,
      message: "Payment updated successfully",
      data: paymentResponse,
    });
  } catch (error) {
    return res.status(500).json({
      status: 500,
      message: error.message,
      error: error.stack,
    });
  }
};

const redirectStripe = async (req, res) => {
  try {
    const redirectUrl = `http://localhost:3003`;
    res.redirect(redirectUrl);
  } catch (error) {
    return res.status(500).json({
      status: 500,
      message: "Error while updating payment details",
      error,
    });
  }
};

module.exports = {
  redirectStripe,
  paymentIntent,
};



-----
router.get("/getPaymentIntent/:amount", controller.paymentIntent);
router.get("/redirectStripe", controller.redirectStripe);


---------- How we will hit this api to get the secret that it provide to use in element  ------------------


const [paymentResponse, setPaymentResponse] = useState();

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await axios.get('https://getPaymentIntent/${amount}');
        setPaymentResponse(response.paymentResponse);
      } catch (error) {
        console.error('Error fetching data:', error);
      }
    };

    fetchData();
  }, []);



  ------------


/* eslint-disable react-hooks/exhaustive-deps */
import {
  PaymentElement,
  useElements,
  useStripe,
} from "@stripe/react-stripe-js";
import React from "react";
import { useEffect, useState } from "react";

const CheckoutForm = (secret, amountVal) => {
  const stripe = useStripe();

  const elements = useElements();
  const [isLoading, setisLoading] = useState(false);
  const [updateAmount, setUpdateAmount] = useState(false); // If payment succedded then it will get true
  const [message, setMessage] = useState(""); // This is error we have recieved if any in payment process
  const [paymentRequest, setPaymentRequest] = useState(null); // Not used yet

  console.log({ updateAmount, message, paymentRequest });
  useEffect(() => {
    if (stripe) {
      const pr = stripe.paymentRequest({
        country: "US",
        currency: "usd",
        total: {
          label: "Demo total",
          amount: 10,
        },
        requestPayerName: true,
        requestPayerEmail: true,
      });
      // Check the availability of the Payment Request API.
      pr.canMakePayment().then((result) => {
        if (result) {
          setPaymentRequest(pr);

          pr.on("paymentmethod", async (ev) => {
            // Confirm the PaymentIntent without handling potential next actions (yet).
            const { paymentIntent, error: confirmError } =
              await stripe.confirmCardPayment(
                secret,
                { payment_method: ev.paymentMethod.id },
                { handleActions: false }
              );

            if (confirmError) {
              // Report to the browser that the payment failed, prompting it to
              // re-show the payment interface, or show an error message and close
              // the payment interface.
              ev.complete("fail");
            } else {
              // Report to the browser that the confirmation was successful, prompting
              // it to close the browser payment method collection interface.
              ev.complete("success");
              // Check if the PaymentIntent requires any actions and if so let Stripe.js
              // handle the flow. If using an API version older than "2019-02-11"
              // instead check for: `paymentIntent.status === "requires_source_action"`.
              if (paymentIntent.status === "requires_action") {
                // Let Stripe.js handle the rest of the payment flow.
                const { error } = await stripe.confirmCardPayment(secret);
                if (error) {
                  // The payment failed -- ask your customer for a new payment method.
                } else {
                  // The payment has succeeded.
                  setUpdateAmount(true);
                }
              } else {
                // The payment has succeeded.
              }
            }
          });
        }
      });
    }
  }, [stripe]);

  const handleSubmit = async (event) => {
    setisLoading(true);
    // We don't want to let default form submission happen here,
    // which would refresh the page.
    event.preventDefault();

    if (!stripe || !elements) {
      // Stripe.js has not yet loaded.
      // Make sure to disable form submission until Stripe.js has loaded.
      return;
    }
    const backendUrl =
      process.env.REACT_APP_BACKEND_URL_LOCAL ?? "http://localhost:3003/stripe";

    const redirectUrl = `${backendUrl}/redirectStripe`;
    setUpdateAmount(true);
    // const result = await stripe.confirmCardPayment({  ---> provided by chat gpt that it is more correct
    const result = await stripe.confirmPayment({
      //`Elements` instance that was used to create the Payment Element
      elements,
      confirmParams: {
        return_url: redirectUrl,
      },
    });
    setisLoading(false);

    if (result.error) {
      // Show error to your customer (for example, payment details incomplete)
      setMessage(result?.error?.message);
      setisLoading(false);
    } else {
      // Your customer will be redirected to your `return_url`. For some payment
      // methods like iDEAL, your customer will be redirected to an intermediate
      // site first to authorize the payment, then redirected to the `return_url`.
    }
  };

  return (
    <form>
      <PaymentElement />
      <button onClick={handleSubmit} disabled={!stripe || isLoading}>
        Submit
      </button>
    </form>
  );
};

export default CheckoutForm;




------------------------------------
import React, { useEffect, useState } from "react";
import { Elements } from "@stripe/react-stripe-js";
import { loadStripe } from "@stripe/stripe-js";
import CheckoutForm from "./CheckoutForm";
import axios from "axios";

const StripeData = (amount) => {
  const [secret, setSecret] = useState(null);
  const [paymentResponse, setPaymentResponse] = useState();
  const [cartLoading, setCartLoading] = useState(false);
  const [stripePromise, setstripePromise] = useState("");
  const publicKey = "pk_test_s4IZ5GhOdZGeVcEBSZDW1aJ4";

  const paymentData = async () => {
    setCartLoading(true);
    const data = await axios.get(
      `http://localhost:3003/stripe/getPaymentIntent/1111`
    );
    setPaymentResponse(data?.data?.data);
    setCartLoading(false);
  };

  useEffect(() => {
    console.log("stripePromise");

    const stripePromises = loadStripe(publicKey);
    {
      stripePromises && setstripePromise(stripePromises);
    }
  }, [publicKey]);

  useEffect(() => {
    paymentData();
  }, []);

  useEffect(() => {
    setSecret(paymentResponse?.client_secret);
  }, [paymentResponse]);

  const options = {
    clientSecret: `${secret}`,
  };
  return (
    <>
      {secret === null || cartLoading ? (
        <p>Laoding...</p>
      ) : (
        <Elements stripe={stripePromise} options={options}>
          <CheckoutForm secret={secret} amountVal={amount} />
        </Elements>
      )}
    </>
  );
};

export default StripeData;


-----------------------------

      <StripeData amount={5000} />











STRIPE_API_KEY_FRONTEND=pk_test_s4IZ5GhOdZGeVcEBSZDW1aJ4

STRIPE_API_KEY_BACKEND=sk_test_ui9wRiY8QFwIw8q5M5xhubGP


REACT_APP_API_URL=http://54.225.243.254:9007/
PAYPAL_CLIENT_ID=AWASXf9toaRG7EzK1UfVbNGnlRUmNH4r4oTjB64j8gk5lHGNID6thBGbeTBHC4k5qTRTsUGCP7d7RNBE
REACT_APP_API_MOCKING=true
STRIPE_KEY=pk_test_s4IZ5GhOdZGeVcEBSZDW1aJ4
SKIP_PREFLIGHT_CHECK=true
TSC_COMPILE_ON_ERROR=true
ESLINT_NO_DEV_ERRORS=true
CHOKIDAR_USEPOLLING=true
DISABLE_ESLINT_PLUGIN=true
REACT_APP_GOOGLE_MAPS_API_KEY=AIzaSyBD3umHoUQct-9U8K7oQk6u33TGw6YCOHU
FAST_REFRESH=false
