Stripe Connect 

const STRIPE_CLIENT_ID = process.env.STRIPE_CONNECT_CLIENT_ID;
const BACKEND_URL = process.env.BACKEND_URL;
const FRONTEND_URL = process.env.FRONTEND_URL;
const STRIPE_SECRET_KEY = process.env.STRIPE_CONNECT_SECRET_KEY;
const stripe = require('stripe')(STRIPE_SECRET_KEY);
const Booking = require('../models/booking.model');
const Expert = require('../models/expert.model');

//const Stripe = stripe(STRIPE_CLIENT_ID);

const AuthorizationUrl = 'https://connect.stripe.com/oauth/authorize';

const index = (req, res) => {
  if (!req.query.id) {
    return res.status(400).json({
      status: 400,
      message: 'No expert id provided',
    });
  }
  const redirect_url = `${BACKEND_URL}/v1/stripe/redirect`;
  const connectUrl = `${AuthorizationUrl}?response_type=code&client_id=${STRIPE_CLIENT_ID}&state=${req.query.id}&scope=read_write&redirect_uri=${redirect_url}`;
  return res.status(200).json({
    status: 200,
    message: 'Connect Url',
    data: connectUrl,
  });
};

const redirect = async (req, res) => {
  const id = req.query.state;
  if (req.query.error) {
    const errorMessage = req.query.error.error_description || 'An error occurred.';
    console.error('Error:', errorMessage);
    return res.status(500).send(`Error: ${errorMessage}`);
  }
  const token = await getToken(req.query.code);

  if (token.error) {
    console.error('Token Error:', token.error);
    return res.status(500).send(`Token Error: ${token.error}`);
  }
  const connectedAccountId = token.stripe_user_id;
  if (connectedAccountId) {
    await Expert.findByIdAndUpdate(id, { stripeUserId: connectedAccountId }, { new: true });
    res.redirect(`${FRONTEND_URL}/user/expert/payout-method`);
  }
  const account = await getAccount(connectedAccountId);
  if (account.error) {
    console.error('Account Error:', account.error);
    return res.status(500).send(`Account Error : ${account.error}`);
  }
};

const getToken = async (code) => {
  let token = {};
  try {
    token = await stripe.oauth.token({ grant_type: 'authorization_code', code });
  } catch (error) {
    token.error = error.message;
  }
  return token;
};

const getAccount = async (connectedAccountId) => {
  let account = {};
  try {
    account = await stripe.account.retrieve(connectedAccountId);
  } catch (error) {
    account.error = error.message;
  }
  return account;
};

const payout = async (req, res) => {
  try {
    const expert = await Booking.find({ expertId: '' });
    const payout = await stripe.payouts.create({
      amount: expert.expertAmount,
      currency: 'usd',
    });
    res.json({ success: true, payout });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Failed to initiate payout' });
  }
};

module.exports = {
  index,
  redirect,
  payout,
};
